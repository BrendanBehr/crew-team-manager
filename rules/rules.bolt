//----------------Secures a team---------------------
path /teams/{teamId} is Team {
    read() { 
        hasTeamReadAccess(teamId)
    }
    update() {
        hasTeamUpdateAccess(teamId)
    }
}

type StringNotEmpty extends String {
    validate() { this.length > 0 }
}

type Optional extends String {
    validate() { this.length > 0 || this == null}
}

type AdminRestrictedString extends StringNotEmpty{
    validate() { getAuthUser().permisions == 'admin'}
}

type NonNegativeNumber extends Number {
    validate() { this >=0 }
}

type CheckTeam extends StringNotEmpty {
    validate() { this == prior(this) ||  this == getAuthUser().team}
}

type CheckUser extends StringNotEmpty {
    validate() {this == prior(this)}
}

type CheckEmailUser extends StringNotEmpty {
    validate() {this == prior(this) ||  this == getAuth().user}
}

type AdminCheckUser extends CheckUser {
    validate() {getAuthUser().permisions == 'admin'}
}

type CreatedTimestamp extends Number {
    validate() {
        (prior(this) != null && this == prior(this)) || (prior(this) == null && this == now)
    }
}

type AdminCreatedTimestamp extends CreatedTimestamp {
    validate() {
        getAuthUser().permisions == 'admin'
    }
}

type CurrentTime extends Number {
  validate() { this == now }
}

type Team {
    city: StringNotEmpty,
    color: StringNotEmpty,
    logo: StringNotEmpty,
    state: StringNotEmpty,
    streetAddress: StringNotEmpty,
    teamName: StringNotEmpty,
    updated: CurrentTime,

    validate() { this.updated == now }
}

isAuthenticated() {
    return auth != null && auth.auth != null
}

getAuth() {
    return prior(root).auths[auth.auth]
}

getAuthUser() {
    return prior(root).users[getAuth().user]
}

isAuthenticatedUser() {
    return isAuthenticated() && getAuth() != null && getAuthUser() != null
}

hasTeamReadAccess(teamId) {
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasCreateAccess() {
    return getAuth().status == 'active'
}

hasTeamUpdateAccess(teamId) {
    return getAuthUser().team == teamId && getAuth().status == 'active'
}

//-----------------Secures the athletes--------------------
path /athletes/{athleteId} is Athlete {
    read() { 
        hasAthleteReadAccess(athleteId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasAthleteUpdateAccess(athleteId)
    }

    delete() {
        hasAthleteDeleteAccess(athleteId)
    }
}

type Athlete {
    city: StringNotEmpty,
    driver: StringNotEmpty,
    ergScore: StringNotEmpty,
    firstName: StringNotEmpty,
    credential: Optional,
    fundRaising: NonNegativeNumber,
    gender: StringNotEmpty,
    height: StringNotEmpty,
    lastName: StringNotEmpty,
    phone: StringNotEmpty,
    side: StringNotEmpty,
    state: StringNotEmpty,
    streetAddress: StringNotEmpty,
    team: CheckTeam,
    weight: AthleteWeight,
    year: StringNotEmpty,
    email: StringNotEmpty,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now}
} 

type AthleteWeight extends NonNegativeNumber{
    validate() {this < 400}
}

getAthlete(athleteId){
    return prior(root).athletes[athleteId]
}

hasAthleteReadAccess(athleteId) {
    return getAuthUser().team == getAthlete(athleteId).team && getAuth().status == 'active'
}

hasAthleteUpdateAccess(athleteId) {
    return getAuth().status == 'active' && getAuthUser().team == getAthlete(athleteId).team
}

hasAthleteDeleteAccess(athleteId){
    return  getAuth().status == 'active' && getAuthUser().team == getAthlete(athleteId).team && getAuthUser().permisions == 'admin'
}

//------------------Secures the boats----------------------
path /boats/{boatId} is Boat {
    read() { 
        hasBoatReadAccess(boatId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasBoatUpdateAccess(boatId)
    }

    delete(){
        hasBoatDeleteAccess(boatId)
    }
}

type Boat {
    manufacturer: StringNotEmpty,
    name: StringNotEmpty,
    rigging: StringNotEmpty,
    size: BoatSize,
    team: CheckTeam,
    created: CreatedTimestamp,
    type: StringNotEmpty,
    updated: CurrentTime,

    validate() { this.updated == now}
} 

type BoatSize extends Number {
    validate() { this > 0 && this <= 8 }
}

getBoat(boatId){
    return prior(root).boats[boatId]
}

hasBoatReadAccess(boatId) {
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team && getAuth().status == 'active'
}

hasBoatUpdateAccess(boatId) {
    return getAuth().status == 'active' && getAuthUser().team == getBoat(boatId).team
}

hasBoatDeleteAccess(boatId){
    return  getAuth().status == 'active' && getAuthUser().team == getBoat(boatId).team && getAuthUser().permisions == 'admin'
}

//------------------Secures the credentials----------------------
path /credentials/{credentialId} is Credential {
    read() { 
        hasCredentialReadAccess(credentialId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasCredentialUpdateAccess(credentialId)
    }

    delete(){
        hasCredentialDeleteAccess(credentialId)
    }
}

type Credential {
    credential: StringNotEmpty,
    hash: StringNotEmpty,
    salt: StringNotEmpty,
    user: CheckUser,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now}
} 

getCredential(credentialId){
    return prior(root).credentials[credentialId]
}

hasCredentialReadAccess(credentialId) {
    return isAuthenticatedUser() && getUser(getCredential(credentialId).user).team == getAuthUser().team && (getAuth().user == getCredential(credentialId).user || getAuthUser().permisions == 'admin') && getAuth().status == 'active'
}

hasCredentialUpdateAccess(credentialId) {
    return getAuth().status == 'active' && getUser(getCredential(credentialId).user).team == getAuthUser().team && (getAuth().user == getCredential(credentialId).user || getAuthUser().permisions == 'admin')
}

hasCredentialDeleteAccess(credentialId){
    return  getAuth().status == 'active' && getUser(getCredential(credentialId).user).team == getAuthUser().team && getAuth().user == getCredential(credentialId).user && getAuthUser().permisions == 'admin'
}

//-----------------Secures the auths---------------------
path /auths/{authId} is Auth {
    read() { 
        hasAuthReadAccess(authId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasAuthUpdateAccess(authId)
    }
}

type Auth {
    ip: AdminRestrictedString,
    status: AdminRestrictedString,
    permisions: AdminRestrictedString,
    created: AdminCreatedTimestamp,
    updated: CurrentTime,
    browser: AdminRestrictedString,
    user: AdminCheckUser,
    
    validate() { this.updated == now}
} 

getAuthTeam(authId){
    return prior(root).auths[authId]
}

hasAuthReadAccess(authId) {
    return getAuth().user == getAuthTeam(authId).user && (auth.auth == authId || (getAuthTeam(authId).status == 'active' && getAuth().status == 'active'))
}

hasAuthUpdateAccess(authId) {
    return getAuth().user == getAuthTeam(authId).user && getAuthTeam(authId).status == 'active' && getAuth().status == 'active'
}

//------------------Secures the emails-----------------------
path /emails/{emailId} is Email {
    read() { 
        hasEmailReadAccess(emailId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasEmailUpdateAccess(emailId)
    }

    delete(){
        hasEmailDeleteAccess(emailId)
    }
}

type Email {
    value: StringNotEmpty,
    user: CheckEmailUser,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
} 

getEmail(emailId){
    return prior(root).emails[emailId]
}

hasEmailReadAccess(emailId) {
    return isAuthenticatedUser() && getAuthUser().team ==  getUser(getEmail(emailId).user).team && getAuth().status == 'active'
}

hasEmailUpdateAccess(emailId) {
    return getAuthUser().team == getUser(getEmail(emailId).user).team && getAuth().status == 'active'
}

hasEmailDeleteAccess(emailId){
    return  getAuth().status == 'active' && getAuthUser().team == getUser(getEmail(emailId).user).team && getAuthUser().permisions == 'admin'
}

//------------------Secures the ergs-----------------------
path /ergs/{ergId} is Erg {
    read() { 
        hasErgReadAccess(ergId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasErgUpdateAccess(ergId)
    }

    delete(){
        hasErgDeleteAccess(ergId)
    }
}

type Erg {
    condition: StringNotEmpty,
    location: StringNotEmpty,
    model: StringNotEmpty,
    number: NonNegativeNumber,
    screenType: StringNotEmpty,
    team: CheckTeam,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
} 

getErg(ergId){
    return prior(root).ergs[ergId]
}

hasErgReadAccess(ergId) {
    return isAuthenticatedUser() && getAuthUser().team == getErg(ergId).team && getAuth().status == 'active'
}

hasErgUpdateAccess(ergId) {
    return getAuthUser().team == getErg(ergId).team && getAuth().status == 'active'
}

hasErgDeleteAccess(ergId){
    return  getAuth().status == 'active' && getAuthUser().team == getErg(ergId).team && getAuthUser().permisions == 'admin'
}

//------------------Secures the finances---------------------
path /finances/{financeId} is Finance {
    read() { 
        hasFinanceReadAccess(financeId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasFinanceUpdateAccess(financeId)
    }

    delete(){
        hasFinanceDeleteAccess(financeId)
    }
}

type Finance {
    expenses: NonNegativeNumber,
    gross: Number,
    incomes: NonNegativeNumber,
    reason: StringNotEmpty,
    team: CheckTeam,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
} 

getFinance(financeId){
    return prior(root).finances[financeId]
}

hasFinanceReadAccess(financeId) {
    return isAuthenticatedUser() && getAuthUser().team == getFinance(financeId).team && getAuth().status == 'active'
}

hasFinanceUpdateAccess(financeId) {
    return getAuth().status == 'active' && getAuthUser().team == getFinance(financeId).team
}

hasFinanceDeleteAccess(financeId){
    return  getAuth().status == 'active' && getAuthUser().team == getFinance(financeId).team && getAuthUser().permisions == 'admin'
}

//--------------------Secures the oars-------------------
path /oars/{oarId} is Oar {
    read() { 
        hasOarReadAccess(oarId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasOarUpdateAccess(oarId)
    }

    delete(){
        hasOarDeleteAccess(oarId)
    }
}

type Oar {
    color: StringNotEmpty,
    handleGrip: StringNotEmpty,
    length: NonNegativeNumber,
    name: StringNotEmpty,
    shape: StringNotEmpty,
    team: CheckTeam,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
} 

getOar(oarId){
    return prior(root).oars[oarId]
}

hasOarReadAccess(oarId) {
    return isAuthenticatedUser() && getAuthUser().team == getOar(oarId).team && getAuth().status == 'active'
}

hasOarUpdateAccess(oarId) {
    return getAuth().status == 'active' && getAuthUser().team == getOar(oarId).team
}

hasOarDeleteAccess(oarId){
    return  getAuth().status == 'active' && getAuthUser().team == getOar(oarId).team && getAuthUser().permisions == 'admin'
}

//-------------------Secures the pictures-------------------
path /pictures/{pictureId} is Picture {
    read() { 
        hasPictureReadAccess(pictureId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasPictureUpdateAccess(pictureId)
    }

    delete(){
        hasPictureDeleteAccess(pictureId)
    }
}

type Picture {
    caption: StringNotEmpty,
    team: CheckTeam,
    url: StringNotEmpty,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
} 

getPicture(pictureId){
    return prior(root).pictures[pictureId]
}

hasPictureReadAccess(pictureId) {
    return isAuthenticatedUser() && getAuthUser().team == getPicture(pictureId).team && getAuth().status == 'active'
}

hasPictureUpdateAccess(pictureId) {
    return getAuth().status == 'active' && getAuthUser().team == getPicture(pictureId).team
}

hasPictureDeleteAccess(pictureId){
    return  getAuth().status == 'active' && getAuthUser().team == getPicture(pictureId).team && getAuthUser().permisions == 'admin'
}

//-------------------Secures the races-------------------
path /races/{raceId} is Race {
    read() { 
        hasRaceReadAccess(raceId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasRaceUpdateAccess(raceId)
    }

    delete(){
        hasRaceDeleteAccess(raceId)
    }
}

type Race {
    bowNumber: NonNegativeNumber,
    eventName: StringNotEmpty,
    raceTime: StringNotEmpty,
    suggestedLaunchTime: StringNotEmpty,
    team: CheckTeam,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }

} 

getRace(raceId){
    return prior(root).races[raceId]
}

hasRaceReadAccess(raceId) {
    return isAuthenticatedUser() && getAuthUser().team == getRace(raceId).team && getAuth().status == 'active'
}

hasRaceUpdateAccess(raceId) {
    return getAuth().status == 'active' && getAuthUser().team == getRace(raceId).team
}

hasRaceDeleteAccess(raceId){
    return  getAuth().status == 'active' && getAuthUser().team == getRace(raceId).team && getAuthUser().permisions == 'admin'
}

//-------------------Secures the regattas--------------------
path /regattas/{regattaId} is Regatta {
    read() { 
        hasRegattaReadAccess(regattaId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasRegattaUpdateAccess(regattaId)
    }

    delete(){
        hasRegattaDeleteAccess(regattaId)
    }
}

type Regatta {
    city: StringNotEmpty,
    cost: NonNegativeNumber,
    head: StringNotEmpty,
    locationImage: StringNotEmpty,
    name: StringNotEmpty,
    state: StringNotEmpty,
    streetAddress: StringNotEmpty,
    team: CheckTeam,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
} 

getRegatta(regattaId){
    return prior(root).regattas[regattaId]
}

hasRegattaReadAccess(regattaId) {
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team && getAuth().status == 'active'
}

hasRegattaUpdateAccess(regattaId) {
    return getAuth().status == 'active' && getAuthUser().team == getRegatta(regattaId).team
}

hasRegattaDeleteAccess(regattaId){
    return  getAuth().status == 'active' && getAuthUser().team == getRegatta(regattaId).team && getAuthUser().permisions == 'admin'
}

//------------------Secures the riggers----------------------
path /riggers/{riggerId} is Rigger{
    read() { 
        hasRiggerReadAccess(riggerId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasRiggerUpdateAccess(riggerId)
    }

    delete(){
        hasRiggerDeleteAccess(riggerId)
    }
}

type Rigger{
    seat: SeatNumber,
    side: StringNotEmpty,
    style: StringNotEmpty,
    type: StringNotEmpty,
    team: CheckTeam,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }
}

type SeatNumber extends NonNegativeNumber{
    validate() { this > 0 && this <= 8   }
}

getRigger(riggerId){
    return prior(root).riggers[riggerId]
}

hasRiggerReadAccess(riggerId) {
    return isAuthenticatedUser() && getAuthUser().team == getRigger(riggerId).team && getAuth().status == 'active'
}

hasRiggerUpdateAccess(riggerId) {
    return getAuth().status == 'active' && getAuthUser().team == getRigger(riggerId).team
}

hasRiggerDeleteAccess(riggerId){
    return  getAuth().status == 'active' && getAuthUser().team == getRigger(riggerId).team && getAuthUser().permisions == 'admin'
}

//------------------Secures Users-------------------------
path /users/{userId} is User{
    read() { 
        hasUserReadAccess(userId)
    }
    create() {
        hasCreateAccess()
    }
    update() {
        hasUserUpdateAccess(userId)
    }

    delete(){
        hasUserDeleteAccess(userId)
    }
}

type User {
    credentials: StringNotEmpty,
    credential: StringNotEmpty,
    firstName: StringNotEmpty,
    lastName: StringNotEmpty,
    status: StringNotEmpty,
    permisions: StringNotEmpty,
    team: CheckTeam,
    email: StringNotEmpty,
    userName: StringNotEmpty,
    created: CreatedTimestamp,
    updated: CurrentTime

    validate() { this.updated == now }
}

hasUserReadAccess(userId) {
    return isAuthenticatedUser() && getAuth().user == userId && getAuth().status == 'active'
}

hasUserUpdateAccess(userId) {
    return getAuth().status == 'active' && getAuth().user == userId
}

getUser(userId){
    return prior(root).users[userId]
}

hasUserDeleteAccess(userId){
    return  getAuth().status == 'active' && getAuthUser().team == getUser(userId).team && getAuthUser().permisions == 'admin'
}

//*****************************Fan outs********************************
//-----------------------------BoatAthlete-------------------------------

path /boatAthletes/{boatId} is FanOut {
    read() {
        hasBoatAthleteReadAccess(boatId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasBoatAthleteUpdateAccess(boatId)
    }

    delete() {
        hasBoatAthleteDeleteAccess(boatId)
    }

        validate() {getBoat(boatId).team == getAuthUser().team}
}

type FanOut  {
    validate() { getAuthUser().permisions == 'admin' }
}

hasBoatAthleteReadAccess(boatId){
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team && getAuth().status == 'active'
}

hasBoatAthleteUpdateAccess(boatId){
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team
}

hasBoatAthleteDeleteAccess(boatId){
    return  getAuth().status == 'active' && getAuthUser().team == getBoat(boatId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------BoatOar--------------------------------

path /boatOars/{boatId} is FanOut {
    read() {
        hasBoatOarReadAccess(boatId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasBoatOarUpdateAccess(boatId)
    }

    delete() {
        hasBoatOarDeleteAccess(boatId)
    }

    validate() {getBoat(boatId).team == getAuthUser().team}
}

hasBoatOarReadAccess(boatId){
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team && getAuth().status == 'active'
}

hasBoatOarUpdateAccess(boatId){
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team
}

hasBoatOarDeleteAccess(boatId){
    return  getAuth().status == 'active' && getAuthUser().team == getBoat(boatId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------BoatRigger--------------------------------

path /boatRiggers/{boatId} is FanOut {
    read() {
        hasBoatRiggerReadAccess(boatId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasBoatRiggerUpdateAccess(boatId)
    }

    delete() {
        hasBoatRiggerDeleteAccess(boatId)
    }

    validate() {getBoat(boatId).team == getAuthUser().team}
}

hasBoatRiggerUpdateAccess(boatId){
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team && getAuth().status == 'active'
}

hasBoatRiggerReadAccess(boatId){
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team && getAuth().status == 'active'
}

hasBoatRiggerDeleteAccess(boatId){
    return  getAuth().status == 'active' && getAuthUser().team == getBoat(boatId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------AthleteEmail--------------------------------

path /athleteEmails/{athleteId} is FanOut {
    read() {
        hasAthleteEmailReadAccess(athleteId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasAthleteEmailUpdateAccess(athleteId)
    }

    delete() {
        hasAthleteEmailDeleteAccess(athleteId)
    }

    validate() {getAthlete(athleteId).team == getAuthUser().team}
}

hasAthleteEmailReadAccess(athleteId){
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team && getAuth().status == 'active'
}

hasAthleteEmailUpdateAccess(athleteId){
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team
}

hasAthleteEmailDeleteAccess(athleteId){
    return  getAuth().status == 'active' && getAuthUser().team == getAthlete(athleteId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------AthleteErg--------------------------------

path /athleteErgs/{athleteId} is FanOut {
    read() {
        hasAthleteErgReadAccess(athleteId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasAthleteErgUpdateAccess(athleteId)
    }

    delete() {
        hasAthleteErgDeleteAccess(athleteId)
    }

    validate() {getAthlete(athleteId).team == getAuthUser().team}
}

hasAthleteErgReadAccess(athleteId){
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team && getAuth().status == 'active'
}

hasAthleteErgUpdateAccess(athleteId){
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team
}

hasAthleteErgDeleteAccess(athleteId){
    return  getAuth().status == 'active' && getAuthUser().team == getAthlete(athleteId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------AthleteFinance--------------------------------

path /athleteFinances/{athleteId} is FanOut {
    read() {
        hasAthleteFinanceReadAccess(athleteId)
    }

    update() {
        hasAthleteFinanceUpdateAccess(athleteId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasAthleteFinanceDeleteAccess(athleteId)
    }

    validate() {getAthlete(athleteId).team == getAuthUser().team}
}

hasAthleteFinanceReadAccess(athleteId){
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team && getAuth().status == 'active'
}

hasAthleteFinanceUpdateAccess(athleteId){
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team 
}

hasAthleteFinanceDeleteAccess(athleteId){
    return  getAuth().status == 'active' && getAuthUser().team == getAthlete(athleteId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------RegattaRace--------------------------------

path /regattaRaces/{regattaId} is FanOut {
    read() {
        hasRegattaRaceReadAccess(regattaId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasRegattaRaceUpdateAccess(regattaId)
    }

    delete() {
        hasRegattaRaceDeleteAccess(regattaId)
    }

    validate() {getRegatta(regattaId).team == getAuthUser().team}
}

hasRegattaRaceReadAccess(regattaId){
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team && getAuth().status == 'active'
}

hasRegattaRaceUpdateAccess(regattaId){
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

hasRegattaRaceDeleteAccess(regattaId){
    return  getAuth().status == 'active' && getAuthUser().team == getRegatta(regattaId).team && getAuthUser().permisions == 'admin'
}

//----------------------------------RegattaPicture--------------------------------

path /regattaPictures/{regattaId} is FanOut {
    read() {
        hasRegattaPictureReadAccess(regattaId)
    }

    create() {
        hasCreateAccess()
    }

    update() {
        hasRegattaPictureUpdateAccess(regattaId)
    }

    delete() {
        hasRegattaPictureDeleteAccess(regattaId)
    }

    validate() {getRegatta(regattaId).team == getAuthUser().team}
}

hasRegattaPictureReadAccess(regattaId){
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team && getAuth().status == 'active'
}

hasRegattaPictureUpdateAccess(regattaId){
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

hasRegattaPictureDeleteAccess(regattaId){
    return  getAuth().status == 'active' && getAuthUser().team == getRegatta(regattaId).team && getAuthUser().permisions == 'admin'
}

//**************************TeamFanOuts********************************
//--------------------------TeamAthlete-------------------------------
path /teamAthletes/{teamId} is FanOut {
    read() {
        hasTeamAthleteReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamAthleteDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamAthleteReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamAthleteDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamBoat-------------------------------
path /teamBoats/{teamId} is FanOut {
    read() {
        hasTeamBoatReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamBoatDeleteAccess(teamId)
    }
    validate() {teamId == getAuthUser().team}
}

hasTeamBoatReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamBoatDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamErg-------------------------------
path /teamErgs/{teamId} is FanOut {
    read() {
        hasTeamErgReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamErgDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamErgReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamErgDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamFinance-------------------------------
path /teamFinances/{teamId} is FanOut {
    read() {
        hasTeamFinanceReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamFinanceDeleteAccess(teamId)
    }
    validate() {teamId == getAuthUser().team}
}

hasTeamFinanceReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamFinanceDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamOar-------------------------------
path /teamOars/{teamId} is FanOut {
    read() {
        hasTeamOarReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamOarDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamOarReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamOarDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamPicture-------------------------------
path /teamPictures/{teamId} is FanOut {
    read() {
        hasTeamPictureReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamPictureDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamPictureReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamPictureDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamRace-------------------------------
path /teamRaces/{teamId} is FanOut {
    read() {
        hasTeamRaceReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamRaceDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamRaceReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId  && getAuth().status == 'active'
}

hasTeamRaceDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamRegatta-------------------------------
path /teamRegattas/{teamId} is FanOut {
    read() {
        hasTeamRegattaReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamRegattaDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamRegattaReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamRegattaDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}

//--------------------------TeamRigger-------------------------------
path /teamRiggers/{teamId} is FanOut {
    read() {
        hasTeamRiggerReadAccess(teamId)
    }

    create() {
        hasCreateAccess()
    }

    delete() {
        hasTeamRiggerDeleteAccess(teamId)
    }

    validate() {teamId == getAuthUser().team}
}

hasTeamRiggerReadAccess(teamId){
    return isAuthenticatedUser() && getAuthUser().team == teamId && getAuth().status == 'active'
}

hasTeamRiggerDeleteAccess(teamId){
    return  getAuth().status == 'active' && getAuthUser().team == teamId && getAuthUser().permisions == 'admin'
}