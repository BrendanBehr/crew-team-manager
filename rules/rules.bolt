//----------------Secures a team---------------------
path /teams/{teamId} is Team {
    read() { 
        hasTeamReadAccess(teamId)
    }
    create() {
        hasTeamCreateAccess(teamId)
    }
    update() {
        hasTeamUpdateAccess(teamId)
    }
}

type Team {
    city: TeamCity,
    color: TeamColor,
    logo: TeamLogo,
    state: TeamState,
    streetAddress: TeamAddress,
    teamName: CoolName,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.team != null}
}

type TeamCity extends String {
    validate() { this.length > 0 || root.team != null}
}

type TeamColor extends String {
    validate() { this.length > 0 || root.team != null}
}


type TeamLogo extends String {
  validate() { this.length > 0 || root.team != null}  
}

type TeamState extends String {
     validate() { this.length > 0 || root.team != null}
}

type TeamAddress extends String {
   validate() { this.length > 0 || root.team != null}  
}

type CoolName extends String {
      validate() { this.length > 0 || root.team != null}
}

isAuthenticated() {
    return auth != null && auth.auth != null
}

getAuth() {
    return prior(root).auths[auth.auth]
}

getAuthUser() {
    return prior(root).users[getAuth().user]
}

isAuthenticatedUser() {
    return isAuthenticated() && getAuth() != null && getAuthUser() != null
}

hasTeamReadAccess(teamId) {
    return isAuthenticatedUser() && getAuthUser().team == teamId
}

hasTeamCreateAccess(teamId) {
    return getAuth().team == teamId
}

hasTeamUpdateAccess(teamId) {
    return getAuthUser().team == teamId
}

//-----------------Secures the athletes--------------------
path /athletes/{athleteId} is Athlete {
    read() { 
        hasAthleteReadAccess(athleteId)
    }
    create() {
        hasAthleteCreateAccess(athleteId)
    }
    update() {
        hasAthleteUpdateAccess(athleteId)
    }
}

type Athlete {
    city: HomeCity,
    credential: AthleteCredential,
    driver: Boolean,
    ergScore: FatErgos,
    firstName: AthleteFirst,
    fundRaising: MoneyRaised,
    gender: AthleteGender,
    height: AthleteHeight,
    lastName: AthleteLast,
    phone: PhoneNumber,
    side: RowingSide,
    state: HomeState,
    streetAddress: AthleteAddress,
    team: String,
    weight: AthleteWeight,
    year: SchoolYear,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now}
} 

type HomeCity extends String{
    validate() { this.length > 0 || this.only != null }
}

type AthleteCredential extends String{
    validate() { this.length > 0 || this.only != null }
}

type FatErgos extends String{
    validate() { this.length > 0 || this.only != null }
}

type AthleteFirst extends String{
    validate() { this.length > 0 || this.only != null  }
}

type MoneyRaised extends Number{
    validate() { this > 0 || this.only != null  }
}

type AthleteGender extends String{
    validate() { this.length > 0 || this.only != null  }
}

type AthleteHeight extends String{
    validate() { this.length > 0 || this.only != null  }
}

type AthleteLast extends String{
    validate() { this.length > 0 || this.only != null  }
}

type PhoneNumber extends String{
    validate() { this.length > 0 || this.only != null  }
}

type RowingSide extends String{
    validate() { this.length > 0 || this.only != null  }
}

type HomeState extends String{
    validate() { this.length > 0 || this.only != null  }
}

type AthleteAddress extends String{
    validate() { this.length > 0 || this.only != null  }
}

type AthleteWeight extends Number{
    validate() { this > 0 && this < 400 || this.only != null  }
}

type SchoolYear extends String{
    validate() { this.length > 0 || this.only != null  }
}

getAthlete(athleteId){
    return prior(root).athletes[athleteId]
}

hasAthleteReadAccess(athleteId) {
    return getAuthUser().team == getAthlete(athleteId).team
}

hasAthleteCreateAccess(athleteId) {
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team
}

hasAthleteUpdateAccess(athleteId) {
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team
}

//------------------Secures the boats----------------------
path /boats/{boatId} is Boat {
    read() { 
        hasBoatReadAccess(boatId)
    }
    create() {
        hasBoatCreateAccess(boatId)
    }
    update() {
        hasBoatUpdateAccess(boatId)
    }
}

type Boat {
    manufacturer: BoatCompany,
    name: BoatName,
    rigging: BoatRigging,
    size: BoatSize,
    team: String,
    type: RowingType

    validate() { this.update == now }
} 

type BoatCompany extends String {
    validate() { this.length > 0 || this.only != null  }
} 

type BoatName extends String {
    validate() { this.length > 0|| this.only != null  }
}

type BoatRigging extends String {
    validate() { this.length > 0 || this.only != null  }
}

type BoatSize extends Number {
    validate() { this.lenght > 0 || this.only != null  }
}

type RowingType extends String {
    validate() { this.length > 0  || this.only != null  }
}

getBoat(boatId){
    return prior(root).boats[boatId]
}

hasBoatReadAccess(boatId) {
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team
}

hasBoatCreateAccess(boatId) {
    
    return isAuthenticatedUser()  && getAuthUser().team == getBoat(boatId).team
}

hasBoatUpdateAccess(boatId) {
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team
}

//-----------------Secures the auths---------------------
path /auths/{authId} is Auth {
    read() { 
        hasAuthReadAccess(authId)
    }
    create() {
        hasAuthCreateAccess(authId)
    }
    update() {
        hasAuthUpdateAccess(authId)
    }
}

type Auth {
    created: CreatedTimestamp,
    ip: IPString,
    status: AuthStat,
    updated: CurrentTime,
    user: String
    
    validate() { this.updated == now}
} 

type CreatedTimestamp extends Number {
    validate() {
        (prior(this) != null && this == prior(this)) || (prior(this) == null && this == now)
    }
}

type IPString extends String {
    validate() { this.length > 0 || this.only != null }
}

type AuthStat extends String {
    validate() { this.length > 0 || this.only != null }
}

type CurrentTime extends Number {
  validate() { this == now || this.only != null}
}

getAuthTeam(authId){
    return prior(root).auths[authId]
}

hasAuthReadAccess(authId) {
    return getAuth().user == getAuthTeam(authId).user && (auth.auth == authId || (getAuthTeam(authId).status == 'active' && getAuth().status == 'active'))
}

hasAuthCreateAccess(authId) {
    return getAuth().user == getAuthTeam(authId).user && getAuthTeam(authId).status == 'active' && getAuth().status == 'active'
}

hasAuthUpdateAccess(authId) {
    return getAuth().user == getAuthTeam(authId).user && getAuthTeam(authId).status == 'active' && getAuth().status == 'active'
}

//------------------Secures the ergs-----------------------
path /ergs/{ergId} is Erg {
    read() { 
        hasErgReadAccess(ergId)
    }
    create() {
        hasErgCreateAccess(ergId)
    }
    update() {
        hasErgUpdateAccess(ergId)
    }
}

type Erg {
    condition: ErgCondition,
    location: HomeAway,
    model: ErgModel,
    number: NumberErg,
    screenType: Screen,
    team: String,
    created: CreatedTimestamp,
    updated: CurrentTime,

    validate() { this.updated == now }

} 

type ErgCondition extends String {
    validate() { this.length > 0 || this != null }
}

type HomeAway extends String {
    validate() { this.length > 0 || this != null }
}

type ErgModel extends String {
    validate() { this.length > 0 || this != null }
}

type NumberErg extends Number {
    validate() { this > 0 && this < 100 || this != null }
}

type Screen extends String {
    validate() { this.length > 0 || this != null }
}

getErg(ergId){
    return prior(root).ergs[ergId]
}

hasErgReadAccess(ergId) {
    return isAuthenticatedUser() && getAuthUser().team == getErg(ergId).team
}

hasErgCreateAccess(ergId) {
    return getAuthUser().team == getErg(ergId).team
}

hasErgUpdateAccess(ergId) {
    return getAuthUser().team == getErg(ergId).team
}

//------------------Secures the finances---------------------
path /finances/{financeId} is Finance {
    read() { 
        hasFinanceReadAccess(financeId)
    }
    create() {
        hasFinanceCreateAccess(financeId)
    }
    update() {
        hasFinanceUpdateAccess(financeId)
    }
}

type Finance {
    expenses: Life,
    gross: Number,
    incomes: Dreams,
    reason: PaymentReason,
    team: String
    created: CreatedTimestamp,
    updated: CurrentTime,
} 

type Life extends Number {
    validate() { this < 0 || this.only != null  }
}

type Dreams extends Number {
    validate() { this > 0 || this.only != null  }
}

type PaymentReason extends String {
    validate() { this.length > 0 && this.length < 64 || this.only != null  }
}

getFinance(financeId){
    return prior(root).finances[financeId]
}

hasFinanceReadAccess(financeId) {
    return isAuthenticatedUser() && getAuthUser().team == getFinance(financeId).team
}

hasFinanceCreateAccess(financeId) {
    return isAuthenticatedUser() && getAuthUser().team == getFinance(financeId).team
}

hasFinanceUpdateAccess(financeId) {
    return isAuthenticatedUser() && getAuthUser().team == getFinance(financeId).team
}

//--------------------Secures the oars-------------------
path /oars/{oarId} is Oar {
    read() { 
        hasOarReadAccess(oarId)
    }
    create() {
        hasOarCreateAccess(oarId)
    }
    update() {
        hasOarUpdateAccess(oarId)
    }
}

type Oar {
    color: BeautifulColor,
    handleGrip: DestroyHands,
    length: ShaftLength,
    name: OarName,
    shape: BladeShape
    team: String
    created: CreatedTimestamp,
    updated: CurrentTime,
} 

type BeautifulColor extends String {
    validate() { this.length > 0 || this.only != null  }
}

type DestroyHands extends String {
    validate() { this.length > 0 || this.only != null  }
}

type ShaftLength extends Number {
    validate() { this > 0 || this.only != null  }
}

type OarName extends String {
    validate() { this.length > 0 || this.only != null  }
}

type BladeShape extends String {
    validate() { this.length > 0 || this.only != null  }
}

getOar(oarId){
    return prior(root).oars[oarId]
}

hasOarReadAccess(oarId) {
    return isAuthenticatedUser() && getAuthUser().team == getOar(oarId).team
}

hasOarCreateAccess(oarId) {
    return isAuthenticatedUser() && getAuthUser().team == getOar(oarId).team
}

hasOarUpdateAccess(oarId) {
    return isAuthenticatedUser() && getAuthUser().team == getOar(oarId).team
}

//-------------------Secures the pictures-------------------
path /pictures/{pictureId} is Picture {
    read() { 
        hasPictureReadAccess(pictureId)
    }
    create() {
        hasPictureCreateAccess(pictureId)
    }
    update() {
        hasPictureUpdateAccess(pictureId)
    }
}

type Picture {
    caption: CoolCaption,
    team: String,
    url: LongString
    created: CreatedTimestamp,
    updated: CurrentTime,
} 

type CoolCaption extends String {
    validate() { this.length > 0 || this.only != null  }
}

type LongString extends String {
     validate() { this.length > 0  || this.only != null  }
}

getPicture(pictureId){
    return prior(root).pictures[pictureId]
}

hasPictureReadAccess(pictureId) {
    return isAuthenticatedUser() && getAuthUser().team == getPicture(pictureId).team
}

hasPictureCreateAccess(pictureId) {
    return isAuthenticatedUser() && getAuthUser().team == getPicture(pictureId).team
}

hasPictureUpdateAccess(pictureId) {
    return isAuthenticatedUser() && getAuthUser().team == getPicture(pictureId).team
}

//-------------------Secures the races-------------------
path /races/{raceId} is Race {
    read() { 
        hasRaceReadAccess(raceId)
    }
    create() {
        hasRaceCreateAccess(raceId)
    }
    update() {
        hasRaceUpdateAccess(raceId)
    }
}

type Race {
    bowNumber: BowCard,
    eventName: ThisEvent,
    raceTime: AndTheyreOff,
    suggestedLaunchTime: RaiseTheAnchor,
    team: String
    created: CreatedTimestamp,
    updated: CurrentTime,

} 

type BowCard extends Number {
    validate() { this > 0 || this.only != null  }
}

type ThisEvent extends String {
    validate() { this.length > 0 || this.only != null  }
}

type AndTheyreOff extends String {
    validate() { this.length > 0 || this.only != null  }
}

type RaiseTheAnchor extends String {
    validate() { this.length > 0 || this.only != null  }
}

getRace(raceId){
    return prior(root).races[raceId]
}

hasRaceReadAccess(raceId) {
    return isAuthenticatedUser() && getAuthUser().team == getRace(raceId).team
}

hasRaceCreateAccess(raceId) {
    return isAuthenticatedUser() && getAuthUser().team == getRace(raceId).team
}

hasRaceUpdateAccess(raceId) {
    return isAuthenticatedUser() && getAuthUser().team == getRace(raceId).team
}

//-------------------Secures the regattas--------------------
path /regattas/{regattaId} is Regatta {
    read() { 
        hasRegattaReadAccess(regattaId)
    }
    create() {
        hasRegattaCreateAccess(regattaId)
    }
    update() {
        hasRegattaUpdateAccess(regattaId)
    }
}

type Regatta {
    city: CityName,
    cost: EntryFee,
    head: Boolean,
    locationImage: PrettyPicture,
    name: RegattaName,
    state: LocationState,
    streetAddress: LocationAddress,
    team: String
    created: CreatedTimestamp,
    updated: CurrentTime,
} 

type CityName extends String{
    validate(){ this.length > 0 || this.only != null  }
}

type EntryFee extends Number {
    validate(){ this.length > 0 || this.only != null  }

}

type PrettyPicture extends String {
    validate(){ this.length > 0 || this.only != null  }

}

type RegattaName extends String {
    validate(){ this.length > 0 || this.only != null  }

}

type LocationState extends String {
    validate(){ this.length > 0 || this.only != null  }

}

type LocationAddress {
    validate(){ this.length > 0 || this.only != null  }

}

getRegatta(regattaId){
    return prior(root).regattas[regattaId]
}

hasRegattaReadAccess(regattaId) {
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

hasRegattaCreateAccess(regattaId) {
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

hasRegattaUpdateAccess(regattaId) {
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

//------------------Secures the riggers----------------------
path /riggers/{riggerId} is Rigger{
    read() { 
        hasRiggerReadAccess(riggerId)
    }
    create() {
        hasRiggerCreateAccess(riggerId)
    }
    update() {
        hasRiggerUpdateAccess(riggerId)
    }
}

type Rigger{
    seat: SeatNumber,
    side: BoatSide,
    style: RowingStyle,
    type: RiggerType,
    team: String
    created: CreatedTimestamp,
    updated: CurrentTime,
}

type SeatNumber extends Number{
    validate() { this > 0 && this <= 8  || this.only != null  }
}

type BoatSide extends String{
    validate() { this.length > 0 || this.only != null  }
}

type RowingStyle extends String{
    validate() { this.length > 0 || this.only != null  }
}

type RiggerType extends String{
    validate() { this.length > 0 || this.only != null  }
}

getRigger(riggerId){
    return prior(root).riggers[riggerId]
}

hasRiggerReadAccess(riggerId) {
    return isAuthenticatedUser() && getAuthUser().team == getRigger(riggerId).team
}

hasRiggerCreateAccess(riggerId) {
    return isAuthenticatedUser() && getAuthUser().team == getRigger(riggerId).team
}

hasRiggerUpdateAccess(riggerId) {
    return isAuthenticatedUser() && getAuthUser().team == getRigger(riggerId).team
}