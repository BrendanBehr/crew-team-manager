//----------------Secures a team---------------------
path /teams/{teamId} is Team {
    read() { 
        hasTeamReadAccess(teamId)
    }
    create() {
        hasTeamWriteAccess(teamId)
    }
    update() {
        hasTeamWriteAccess(teamId)
    }
}

type Team {
    city: TeamCity,
    color: TeamColor,
    logo: TeamLogo,
    state: TeamState,
    streetAddress: TeamAddress,
    teamName: CoolName,

    validate() { this.team != null && this != null }
}

type TeamCity extends String {
    validate() { this.length > 0}
    // && this != null || this.city == prior(this).city}
}

type TeamColor extends String {
    validate() { this.length > 0}
    //  && this != null || this.color == prior(this).color}
}


type TeamLogo extends String {
  validate() { this.length > 0}
    //  && this != null || this.logo == prior(this).logo}  
}

type TeamState extends String {
     validate() { this.length > 0}
    //  && this != null || this.state == prior(this).state}
}

type TeamAddress extends String {
   validate() { this.length > 0}
    //  && this != null || this.streetAddress == prior(this).streetAddress}  
}

type CoolName extends String {
      validate() { this.length > 0}
    //  && this != null || this.teamName == prior(this).teamName}
}

isAuthenticated() {
    return auth != null && auth.auth != null
}

getAuth() {
    return prior(root).auths[auth.auth]
}

getAuthUser() {
    return prior(root).users[getAuth().user]
}

isAuthenticatedUser() {
    return isAuthenticated() && getAuth() != null && getAuthUser() != null
}

hasTeamReadAccess(teamId) {
    return isAuthenticatedUser() && getAuthUser().team == teamId
}

hasTeamWriteAccess(teamId) {
    return isAuthenticatedUser() && getAuthUser().team == teamId
}

//-----------------Secures the athletes--------------------
path /athletes/{athleteId} is Athlete {
    read() { 
        hasAthleteReadAccess(athleteId)
    }
    create() {
        hasAthleteWriteAccess(athleteId)
    }
    update() {
        hasAthleteWriteAccess(athleteId)
    }
}

type Athlete {
    city: HomeCity,
    credential: AthleteCredential,
    driver: Boolean,
    ergScore: FatErgos,
    firstName: AthleteFirst,
    fundRaising: MoneyRaised,
    gender: AthleteGender,
    height: AthleteHeight,
    lastName: AthleteLast,
    phone: PhoneNumber,
    side: RowingSide,
    state: HomeState,
    streetAddress: AthleteAddress,
    team: String,
    weight: AthleteWeight,
    year: SchoolYear
} 

type HomeCity extends String{
    validate() { this.length > 0 && this != null }
}

type AthleteCredential extends String{
    validate() { this.length > 0 && this != null }
}

type FatErgos extends String{
    validate() { this.length > 0 && this != null }
}

type AthleteFirst extends String{
    validate() { this.length > 0 && this != null }
}

type MoneyRaised extends Number{
    validate() { this > 0 && this != null }
}

type AthleteGender extends String{
    validate() { this.length > 0 && this != null }
}

type AthleteHeight extends String{
    validate() { this.length > 0 && this != null }
}

type AthleteLast extends String{
    validate() { this.length > 0 && this != null }
}

type PhoneNumber extends String{
    validate() { this.length > 0 && this != null }
}

type RowingSide extends String{
    validate() { this.length > 0 && this != null }
}

type HomeState extends String{
    validate() { this.length > 0 && this != null }
}

type AthleteAddress extends String{
    validate() { this.length > 0 && this != null }
}

type AthleteWeight extends Number{
    validate() { this > 0 && this < 400 && this != null }
}

type SchoolYear extends String{
    validate() { this.length > 0 && this != null }
}

getAthlete(athleteId){
    return prior(root).athletes[athleteId]
}

hasAthleteReadAccess(athleteId) {
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team
}

hasAthleteWriteAccess(athleteId) {
    return isAuthenticatedUser() && getAuthUser().team == getAthlete(athleteId).team
}

//------------------Secures the boats----------------------
path /boats/{boatId} is Boat {
    read() { 
        hasBoatReadAccess(boatId)
    }
    create() {
        hasBoatWriteAccess(boatId)
    }
    update() {
        hasBoatWriteAccess(boatId)
    }
}

type Boat {
    manufacturer: BoatCompany,
    name: BoatName,
    rigging: BoatRigging,
    size: BoatSize,
    team: String,
    type: RowingType
} 

type BoatCompany extends String {
    validate() { this.length > 0 && this != null }
} 

type BoatName extends String {
    validate() { this.length > 0&& this != null }
}

type BoatRigging extends String {
    validate() { this.length > 0 && this != null }
}

type BoatSize extends Number {
    validate() { this.lenght > 0 && this != null }
}

type RowingType extends String {
    validate() { this.length > 0  && this != null }
}

getBoat(boatId){
    return prior(root).boats[boatId]
}

hasBoatReadAccess(boatId) {
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team
}

hasBoatWriteAccess(boatId) {
    return isAuthenticatedUser() && getAuthUser().team == getBoat(boatId).team
}

//-----------------Secures the auths---------------------
path /auths/{authId} is Auth {
    read() { 
        hasAuthReadAccess(authId)
    }
    create() {
        hasAuthWriteAccess(authId)
    }
    update() {
        hasAuthWriteAccess(authId)
    }
}

type Auth {
    created: CreatedTimestamp,
    ip: IPString,
    status: AuthStat,
    updated: CurrentTime,
    user: String,
    
    validate() { this.updated == now}
} 

type CreatedTimestamp extends Number {
    validate() {
        (prior(this) != null && this == prior(this)) || (prior(this) == null && this == now)
    }
}

type IPString extends String {
    validate() { this.length > 0 && this != null }
}

type AuthStat extends String {
    validate() { this.length > 0 && this != null }
}

type CurrentTime extends Number {
  validate() { this == now}
}

getAuthTeam(authId){
    return prior(root).auths[authId]
}

hasAuthReadAccess(authId) {
    return getAuth() == getAuthTeam(authId) || (getAuth().user == getAuthTeam(authId).user && getAuthTeam(authId).status == 'active' && getAuth().status == 'active')
}

hasAuthWriteAccess(authId) {
    return getAuth() == getAuthTeam(authId) || (getAuth().user == getAuthTeam(authId).user && getAuthTeam(authId).status == 'active' && getAuth().status == 'active')
}

//------------------Secures the ergs-----------------------
path /ergs/{ergId} is Erg {
    read() { 
        hasErgReadAccess(ergId)
    }
    create() {
        hasErgWriteAccess(ergId)
    }
    update() {
        hasErgWriteAccess(ergId)
    }
}

type Erg {
    condition: ErgCondition,
    location: HomeAway,
    model: ErgModel,
    number: NumberErg,
    screenType: Screen,
    team: String
} 

type ErgCondition extends String {
    validate() { this.length > 0 && this != null }
}

type HomeAway extends String {
    validate() { this.length > 0 && this != null }
}

type ErgModel extends String {
    validate() { this.length > 0 && this != null }
}

type NumberErg extends Number {
    validate() { this > 0 && this < 100 && this != null }
}

type Screen extends String {
    validate() { this.length > 0 && this != null }
}

getErg(ergId){
    return prior(root).ergs[ergId]
}

hasErgReadAccess(ergId) {
    return isAuthenticatedUser() && getAuthUser().team == getErg(ergId).team
}

hasErgWriteAccess(ergId) {
    return isAuthenticatedUser() && getAuthUser().team == getErg(ergId).team
}

//------------------Secures the finances---------------------
path /finances/{financeId} is Finance {
    read() { 
        hasFinanceReadAccess(financeId)
    }
    create() {
        hasFinanceWriteAccess(financeId)
    }
    update() {
        hasFinanceWriteAccess(financeId)
    }
}

type Finance {
    expenses: Life,
    gross: Number,
    incomes: Dreams,
    reason: PaymentReason,
    team: String
} 

type Life extends Number {
    validate() { this < 0 && this != null }
}

type Dreams extends Number {
    validate() { this > 0 && this != null }
}

type PaymentReason extends String {
    validate() { this.length > 0 && this.length < 64 && this != null }
}

getFinance(financeId){
    return prior(root).finances[financeId]
}

hasFinanceReadAccess(financeId) {
    return isAuthenticatedUser() && getAuthUser().team == getFinance(financeId).team
}

hasFinanceWriteAccess(financeId) {
    return isAuthenticatedUser() && getAuthUser().team == getFinance(financeId).team
}

//--------------------Secures the oars-------------------
path /oars/{oarId} is Oar {
    read() { 
        hasOarReadAccess(oarId)
    }
    create() {
        hasOarWriteAccess(oarId)
    }
    update() {
        hasOarWriteAccess(oarId)
    }
}

type Oar {
    color: BeautifulColor,
    handleGrip: DestroyHands,
    length: ShaftLength,
    name: OarName,
    shape: BladeShape
    team: String
} 

type BeautifulColor extends String {
    validate() { this.length > 0 && this != null }
}

type DestroyHands extends String {
    validate() { this.length > 0 && this != null }
}

type ShaftLength extends Number {
    validate() { this > 0 && this != null }
}

type OarName extends String {
    validate() { this.length > 0 && this != null }
}

type BladeShape extends String {
    validate() { this.length > 0 && this != null }
}

getOar(oarId){
    return prior(root).oars[oarId]
}

hasOarReadAccess(oarId) {
    return isAuthenticatedUser() && getAuthUser().team == getOar(oarId).team
}

hasOarWriteAccess(oarId) {
    return isAuthenticatedUser() && getAuthUser().team == getOar(oarId).team
}

//-------------------Secures the pictures-------------------
path /pictures/{pictureId} is Picture {
    read() { 
        hasPictureReadAccess(pictureId)
    }
    create() {
        hasPictureWriteAccess(pictureId)
    }
    update() {
        hasPictureWriteAccess(pictureId)
    }
}

type Picture {
    caption: CoolCaption,
    team: String,
    url: LongString
} 

type CoolCaption extends String {
    validate() { this.length > 0 && this != null }
}

type LongString extends String {
     validate() { this.length > 0  && this != null }
}

getPicture(pictureId){
    return prior(root).pictures[pictureId]
}

hasPictureReadAccess(pictureId) {
    return isAuthenticatedUser() && getAuthUser().team == getPicture(pictureId).team
}

hasPictureWriteAccess(pictureId) {
    return isAuthenticatedUser() && getAuthUser().team == getPicture(pictureId).team
}

//-------------------Secures the races-------------------
path /races/{raceId} is Race {
    read() { 
        hasRaceReadAccess(raceId)
    }
    create() {
        hasRaceWriteAccess(raceId)
    }
    update() {
        hasRaceWriteAccess(raceId)
    }
}

type Race {
    bowNumber: BowCard,
    eventName: ThisEvent,
    raceTime: AndTheyreOff,
    suggestedLaunchTime: RaiseTheAnchor,
    team: String

} 

type BowCard extends Number {
    validate() { this > 0 && this != null }
}

type ThisEvent extends String {
    validate() { this.length > 0 && this != null }
}

type AndTheyreOff extends String {
    validate() { this.length > 0 && this != null }
}

type RaiseTheAnchor extends String {
    validate() { this.length > 0 && this != null }
}

getRace(raceId){
    return prior(root).races[raceId]
}

hasRaceReadAccess(raceId) {
    return isAuthenticatedUser() && getAuthUser().team == getRace(raceId).team
}

hasRaceWriteAccess(raceId) {
    return isAuthenticatedUser() && getAuthUser().team == getRace(raceId).team
}

//-------------------Secures the regattas--------------------
path /regattas/{regattaId} is Regatta {
    read() { 
        hasRegattaReadAccess(regattaId)
    }
    create() {
        hasRegattaWriteAccess(regattaId)
    }
    update() {
        hasRegattaWriteAccess(regattaId)
    }
}

type Regatta {
    city: CityName,
    cost: EntryFee,
    head: Boolean,
    locationImage: PrettyPicture,
    name: RegattaName,
    state: LocationState,
    streetAddress: LocationAddress,
    team: String
} 

type CityName extends String{
    validate(){ this.length > 0 && this != null }
}

type EntryFee extends Number {
    validate(){ this.length > 0 && this != null }

}

type PrettyPicture extends String {
    validate(){ this.length > 0 && this != null }

}

type RegattaName extends String {
    validate(){ this.length > 0 && this != null }

}

type LocationState extends String {
    validate(){ this.length > 0 && this != null }

}

type LocationAddress {
    validate(){ this.length > 0 && this != null }

}

getRegatta(regattaId){
    return prior(root).regattas[regattaId]
}

hasRegattaReadAccess(regattaId) {
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

hasRegattaWriteAccess(regattaId) {
    return isAuthenticatedUser() && getAuthUser().team == getRegatta(regattaId).team
}

//------------------Secures the riggers----------------------
path /riggers/{riggerId} is Rigger{
    read() { 
        hasRiggerReadAccess(riggerId)
    }
    create() {
        hasRiggerWriteAccess(riggerId)
    }
    update() {
        hasRiggerWriteAccess(riggerId)
    }
}

type Rigger{
    seat: SeatNumber,
    side: BoatSide,
    style: RowingStyle,
    type: RiggerType,
    team: String
}

type SeatNumber extends Number{
    validate() { this > 0 && this <= 8  && this != null }
}

type BoatSide extends String{
    validate() { this.length > 0 && this != null }
}

type RowingStyle extends String{
    validate() { this.length > 0 && this != null }
}

type RiggerType extends String{
    validate() { this.length > 0 && this != null }
}

getRigger(riggerId){
    return prior(root).riggers[riggerId]
}

hasRiggerReadAccess(riggerId) {
    return isAuthenticatedUser() && getAuthUser().team == getRigger(riggerId).team
}

hasRiggerWriteAccess(riggerId) {
    return isAuthenticatedUser() && getAuthUser().team == getRigger(riggerId).team
}
